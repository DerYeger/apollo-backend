val arkenvVersion: String by project
val exposedVersion: String by project
val flywayVersion: String by project
val hikariVersion: String by project
val jacocoVersion: String by project
val jbcryptVersion: String by project
val jUnitVersion: String by project
val koinVersion: String by project
val kotlinLoggingVersion: String by project
val kotlinResultVersion: String by project
val kotlinVersion: String by project
val ktorVersion: String by project
val logbackVersion: String by project
val postgresqlVersion: String by project
val prometheusVersion: String by project

plugins {
  application
  kotlin("jvm")
  kotlin("plugin.serialization")
  id("org.jetbrains.dokka")
  id("org.jlleitschuh.gradle.ktlint")
  id("com.github.johnrengelman.shadow")
  jacoco
}

group = "eu.yeger"
version = "1.0.0"

application {
  mainClass.set("io.ktor.server.netty.EngineMain")
}

kotlin {
  explicitApi()
}

sourceSets {
  main {
    java.srcDirs("src")
    resources.srcDirs("resources")
  }
  test {
    java.srcDirs("test")
    resources.srcDirs("testresources")
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven(url = uri("https://kotlin.bintray.com/ktor"))
}

dependencies {
  // Kotlin
  implementation(kotlin("test"))

  // Ktor
  implementation("io.ktor:ktor-server-netty:$ktorVersion")
  implementation("io.ktor:ktor-server-core:$ktorVersion")
  implementation("io.ktor:ktor-server-host-common:$ktorVersion")
  implementation("io.ktor:ktor-auth:$ktorVersion")
  implementation("io.ktor:ktor-auth-jwt:$ktorVersion")
  implementation("io.ktor:ktor-serialization:$ktorVersion")
  implementation("io.ktor:ktor-metrics-micrometer:$ktorVersion")

  // Database
  implementation("org.jetbrains.exposed:exposed-core:$exposedVersion")
  implementation("org.jetbrains.exposed:exposed-jdbc:$exposedVersion")

  // Logging & monitoring
  implementation("ch.qos.logback:logback-classic:$logbackVersion")
  implementation("io.github.microutils:kotlin-logging:$kotlinLoggingVersion")
  implementation("io.micrometer:micrometer-registry-prometheus:$prometheusVersion")

  // Other
  implementation("com.apurebase:arkenv:$arkenvVersion")
  implementation("io.insert-koin:koin-ktor:$koinVersion")
  implementation("com.michael-bull.kotlin-result:kotlin-result:$kotlinResultVersion")
  implementation("com.zaxxer:HikariCP:$hikariVersion")
  implementation("org.postgresql:postgresql:$postgresqlVersion")
  implementation("org.flywaydb:flyway-core:$flywayVersion")
  implementation("org.mindrot:jbcrypt:$jbcryptVersion")

  // Test
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
  testImplementation("io.ktor:ktor-server-tests:$ktorVersion")
}

tasks {
  compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
  }

  compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
  }

  ktlintFormat {
    // Delete the folders that are incorrectly generated by ktlintFormat
    doLast {
      delete("/src/main", "/src/test")
    }
  }

  run.configure {
    environment(
      "DATABASE_HOST" to "localhost",
      "DATABASE_PORT" to "5432",
      "DATABASE_NAME" to "apollo-database",
      "DATABASE_USER" to "apollo-database",
      "DATABASE_PASSWORD" to "apollo-database",
      "JWT_SECRET" to "apollo-admin-secret",
    )
  }

  test {
    useJUnitPlatform()
  }

  shadowJar {
    archiveFileName.set("${project.name}.jar")
  }

  jacocoTestReport {
    reports {
      xml.required.set(true)
      html.required.set(false)
    }
  }

  withType<org.jetbrains.dokka.gradle.DokkaTask>().configureEach {
    dokkaSourceSets {
      named("main") {
        displayName.set("Apollo-Backend")
        reportUndocumented.set(true)
        sourceLink {
          localDirectory.set(file("src/"))
          remoteUrl.set(uri("https://github.com/DerYeger/apollo-backend/tree/master/src").toURL())
        }
      }
    }
  }

  withType<Jar> {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
  }
}

jacoco {
  toolVersion = jacocoVersion
}
