val arkenvVersion: String by project
val jacocoVersion: String by project
val jUnitVersion: String by project
val koinVersion: String by project
val kotlinVersion: String by project
val kotlinResultVersion: String by project
val ktorVersion: String by project
val logbackVersion: String by project

plugins {
    application
    kotlin("jvm")
    kotlin("plugin.serialization")
    id("org.jetbrains.dokka")
    id("org.jlleitschuh.gradle.ktlint")
    id("com.github.johnrengelman.shadow")
    jacoco
}

group = "eu.yeger"
version = "1.0.0"

application {
    mainClass.set("io.ktor.server.netty.EngineMain")
    // The following line is deprecated, but required for the shadowJar task
    mainClassName = "io.ktor.server.netty.EngineMain"
}

kotlin {
    explicitApi()
}

sourceSets {
    main {
        java.srcDirs("src")
        resources.srcDirs("resources")
    }
    test {
        java.srcDirs("test")
        resources.srcDirs("testresources")
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven(url = uri("https://kotlin.bintray.com/ktor"))
}

dependencies {
    // Kotlin dependencies
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")

    // Ktor dependencies
    implementation("io.ktor:ktor-server-netty:$ktorVersion")
    implementation("io.ktor:ktor-server-core:$ktorVersion")
    implementation("io.ktor:ktor-server-host-common:$ktorVersion")
    implementation("io.ktor:ktor-auth:$ktorVersion")
    implementation("io.ktor:ktor-auth-jwt:$ktorVersion")
    implementation("io.ktor:ktor-serialization:$ktorVersion")

    // Other dependencies
    implementation("org.koin:koin-ktor:$koinVersion")
    implementation("ch.qos.logback:logback-classic:$logbackVersion")
    implementation("com.michael-bull.kotlin-result:kotlin-result:$kotlinResultVersion")

    // Test dependencies
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
    testImplementation("io.ktor:ktor-server-tests:$ktorVersion")
}

tasks {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.useIR = true
        // Format the code before compilation
        dependsOn(ktlintFormat)
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.useIR = true
    }

    ktlintFormat {
        // Delete the folders that are incorrectly generated by ktlintFormat
        doLast {
            delete("/src/main", "/src/test")
        }
    }

    test {
        useJUnitPlatform()
    }

    shadowJar {
        archiveFileName.set("${project.name}.jar")
    }

    jacocoTestReport {
        reports {
            xml.isEnabled = true
            html.isEnabled = false
        }
    }

    withType<org.jetbrains.dokka.gradle.DokkaTask>().configureEach {
        dokkaSourceSets {
            named("main") {
                displayName.set("gramoFO-Backend")
                reportUndocumented.set(true)
                sourceLink {
                    localDirectory.set(file("src/main/kotlin"))
                    remoteUrl.set(uri("https://github.com/DerYeger/gramofo-backend/tree/develop/src").toURL())
                }
            }
        }
    }
}

jacoco {
    toolVersion = jacocoVersion
}
